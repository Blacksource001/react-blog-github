{"version":3,"sources":["logo.svg","App.js","Components/GithubReactionTextCard/GithubReactionTextCard.js","Containers/BlogPost/BlogPost.js","Components/Header/Header.js","Components/BlogCard/BlogCard.js","Containers/Blogs/Blogs.js","Routes.js","serviceWorker.js","index.js"],"names":["module","exports","App","GithubReactionTextCard","link","console","log","className","href","target","BlogHome","useState","blog","setBlogs","addReaction","setAddreaction","reactionCounter","setReactionCounter","issueNumber","parseInt","window","location","split","pop","getEmojiStringByName","emojiName","useEffect","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","query","gql","then","result","array","data","repository","issue","reactions","reactions_array","forEach","element","obj","by","user","login","emoji","content","push","setReactionFun","nodes","catch","err","error","title","class","src","author","avatarUrl","moment","updatedAt","format","readingTime","body","minutes","url","options","overrides","a","component","children","props","jsx","pre","language","style","docco","counters","onSelect","githubCounterEmojiSelect","onAdd","Header","BlogCard","lables","setLables","history","useHistory","labels","filter","value","index","name","getLabels","map","key","id","backgroundColor","color","onClick","number","bodyText","Blogs","blogs","issues","v","i","createBrowserHistory","require","Routes","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,uUCyB5BC,I,wHCtBA,SAASC,EAAT,GAA2C,IAATC,EAAQ,EAARA,KAE/C,OADAC,QAAQC,IAAIF,GAEV,yBAAKG,UAAU,4BACb,2DACA,8BACA,8BACE,uBAAGC,KAAMJ,EAAMK,OAAO,UAAtB,8B,szBCEO,SAASC,IAAY,IAAD,EACRC,mBAAS,IADD,mBAC1BC,EAD0B,KACpBC,EADoB,OAEKF,oBAAS,GAFd,mBAE1BG,EAF0B,KAEbC,EAFa,OAGaJ,mBAAS,IAHtB,mBAG1BK,EAH0B,KAGTC,EAHS,KAI3BC,EAAcC,SAASC,OAAOC,SAASb,KAAKc,MAAM,KAAKC,OAmF7D,SAASC,EAAqBC,GAC5B,OAAQA,GACN,IAAK,YACH,MAAO,eAET,IAAK,cACH,MAAO,eAET,IAAK,QACH,MAAO,eAET,IAAK,SACH,MAAO,eAET,IAAK,WACH,MAAO,eAET,IAAK,QACH,MAAO,eAET,IAAK,SACH,MAAO,eAET,IAAK,OACH,MAAO,gBAzGbC,qBAAU,WAKO,IAAIC,IAAa,CAC9BC,IAAK,iCACLC,QAAS,SAAAC,GACPA,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAK,mEAOnCC,MAAM,CACLA,MAAOC,YAAF,IAGiBlB,KA6BvBmB,MAAK,SAAAC,GAQV,IAA0BC,IAPHD,EAAOE,KAAKC,WAAWC,MAQ5C7B,EAAS0B,GAIX,SAAwBI,GAMtB,IAAIC,EAAkB,GACtBD,EAAUE,SAAQ,SAAAC,GAChB,IAAIC,EAAM,CACRC,GAAIF,EAAQG,KAAKC,MACjBC,MAAO3B,EAAqBsB,EAAQM,UAEtCR,EAAgBS,KAAKN,MAGvB9B,EAAmB2B,GAlBnBU,CAAef,EAAMI,UAAUY,UAP5BC,OAAM,SAAAC,GACLpD,QAAQqD,MAAMD,QApDjB,IA4IH,OACE,6BACG7C,EAAK+C,OACJ,yBAAKpD,UAAU,aACb,wBAAIA,UAAU,cAAcK,EAAK+C,OACjC,6BACE,yBAAKpD,UAAU,kBACb,yBAAKqD,MAAM,SAASC,IAAKjD,EAAKkD,OAAOC,YACrC,6BACE,uBAAGxD,UAAU,eAAeK,EAAKkD,OAAOZ,OACxC,uBAAG3C,UAAU,aACVyD,IAAOpD,EAAKqD,WAAWC,OAAO,eADjC,MACoDC,IAAYvD,EAAKwD,MAAMC,QAD3E,eAC+F,uBAAG7D,KAAMI,EAAK0D,IAAK7D,OAAO,UAA1B,sBAKrG,kBAAC,IAAD,CACE8D,QAAS,CACPC,UAAW,CACTC,EAAG,CACDC,UAlDE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaC,EAAhB,mCAChB,uBAAGpE,KAAMoE,EAAMpE,KAAMC,OAAO,SAASF,UAAU,oBAC5CoE,EACD,2BAAOE,KAAG,GAAV,yGAiDUC,IAAK,CACHJ,UAvCE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,kBAAC,IAAD,CAAmBI,SAAS,aAAaC,MAAOC,KAC7CN,EAASC,MAAMD,eA0CT/D,EAAKwD,MAEPtD,GACC,0BAAMP,UAAU,uCAEd,kBAAC,EAAD,CAAwBH,KAAMQ,EAAK0D,OAGvC,kBAAC,gBAAD,CAAeY,SAAUlE,EAAiBmE,SAAU,SAAAhC,GAAK,OA9CjE,SAAkCA,GAChC9C,QAAQC,IAAI6C,GA6CuDiC,CAAyBjC,IAAQkC,MAAO,WAzC3GtE,GAAgBD,Q,OCxJL,SAASwE,IACpB,OACI,yBAAK/E,UAAU,eACf,yBAAKA,UAAU,YACX,wBAAIA,UAAU,gBAAd,cACA,wBAAIA,UAAU,mBAAd,8B,cCFG,SAASgF,EAAT,GAA6B,IAAT3E,EAAQ,EAARA,KAAQ,EACbD,mBAAS,IADI,mBAClC6E,EADkC,KAC1BC,EAD0B,KAGrCC,EAAUC,cAgBd,OAdAjE,qBAAU,YAQV,WACE,IAAM8D,EAAS5E,EAAKgF,OAAOrC,MAAMsC,QAAO,SAACC,EAAOC,GAC9C,MAAqB,QAAdD,EAAME,QAEfP,EAAUD,GAXVS,KACC,IAaD,yBAAK1F,UAAU,iBACb,yBAAKA,UAAU,oBACb,6BACGiF,EAAOU,KAAI,SAAAJ,GACV,OACE,yBAAKK,IAAKL,EAAMM,GAAI7F,UAAU,gBAAgByE,MAAO,CAAEqB,gBAAgB,IAAD,OAAMP,EAAMQ,SAC/ER,EAAME,UAKf,6BACE,uBAAGzF,UAAU,gBAAgB4D,IAAYvD,EAAKwD,MAAMC,QAApD,eAGJ,6BACE,yBAAK9D,UAAU,mBACb,wBAAIgG,QAAS,kBA5BH5C,EA4BkB/C,EAAK+C,MA5BhB6C,EA4BuB5F,EAAK4F,YA3BnDd,EAAQrC,KAAR,gBAAsBM,EAAtB,YAA+B6C,IADjC,IAAkB7C,EAAO6C,IA4BsC5F,EAAK+C,QAE9D,yBAAKpD,UAAU,yBACb,2BACGK,EAAK6F,WAGV,yBAAKlG,UAAU,uB,q0BC4BRmG,MAvEf,WAAkB,IAAD,EACW/F,mBAAS,IADpB,mBACRgG,EADQ,KACD9F,EADC,KA2Df,OAxDAa,qBAAU,WAKO,IAAIC,IAAa,CAC9BC,IAAK,iCACLC,QAAS,SAAAC,GACPA,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAc,UAAD,OAAYC,KAAK,mEAOnCC,MAAM,CACLA,MAAOC,YAAF,OA8BNC,MAAK,SAAAC,GAKV,IAA0BC,IAJHD,EAAOE,KAAKC,WAAWmE,OAAOrD,MAKnD1C,EAAS0B,QApDR,IAuDD,6BACE,kBAAC,EAAD,MACA,yBAAKhC,UAAU,iBACdoG,EAAMT,KAAI,SAACW,EAAGC,GACb,OAAO,kBAAC,EAAD,CAAUlG,KAAMiG,EAAGV,IAAKW,UChEjCpB,GAAUqB,EADWC,EAAQ,GAAWD,wBAc/BE,EAVA,WACb,OACE,kBAAC,IAAD,CAAQvB,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIzC,UAAWgC,IACjC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,4BAA4BzC,UAAWhE,OCH7C0G,QACW,cAA7BhG,OAAOC,SAASgG,UAEe,UAA7BjG,OAAOC,SAASgG,UAEhBjG,OAAOC,SAASgG,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD6H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxF,MAAK,SAAAyF,GACjCA,EAAaC,kB","file":"static/js/main.b0679e21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport \"./GithubReactionTextCard.css\";\n\nexport default function GithubReactionTextCard({ link }) {\n  console.log(link);\n  return (\n    <div className=\"reaction-text-github-div\">\n      <p>Give your reaction on Github</p>\n      <div></div>\n      <span>\n        <a href={link} target=\"_blank\">\n          Github link ‚ö°Ô∏è\n        </a>\n      </span>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\nimport readingTime from \"reading-time\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport \"./BlogPost.css\";\nimport { GithubCounter, GithubSelector } from \"react-reactions\";\nimport GithubReactionTextCard from \"../../Components/GithubReactionTextCard/GithubReactionTextCard\";\n\nexport default function BlogHome() {\n  const [blog, setBlogs] = useState([]);\n  const [addReaction, setAddreaction] = useState(false);\n  const [reactionCounter, setReactionCounter] = useState([]);\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n\n  useEffect(() => {\n    getBlogsFromGithubIssues();\n  }, []);\n\n  function getBlogsFromGithubIssues() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(\"ODM5ODY0MWRmYzUxOTcyZTdhMWMxM2NmZGIwNWU4Yzc3NmI5NTg0ZQ==\")}`\n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repository(owner: \"saadpasta\", name: \"react-blog-github\") {\n              issue(number: ${issueNumber}) {\n                title\n                body\n                bodyHTML\n                url\n                bodyText\n                number\n                bodyHTML\n                author {\n                  url\n                  avatarUrl\n                  login\n                }\n                reactions(first:100){\n                  nodes{\n                    content\n                    user{\n                      id\n                      login\n                    }\n                  }\n                }\n                updatedAt\n                id\n              }\n            }\n          }\n        `\n      })\n      .then(result => {\n        setBlogsFunction(result.data.repository.issue);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  function setBlogsFunction(array) {\n    setBlogs(array);\n    setReactionFun(array.reactions.nodes);\n  }\n\n  function setReactionFun(reactions) {\n    // {\n    //   emoji: \"üëç\", // String emoji reaction\n    //   by: \"case\" // String of persons name\n    // }\n\n    let reactions_array = [];\n    reactions.forEach(element => {\n      let obj = {\n        by: element.user.login,\n        emoji: getEmojiStringByName(element.content)\n      };\n      reactions_array.push(obj);\n    });\n\n    setReactionCounter(reactions_array);\n  }\n\n  function getEmojiStringByName(emojiName) {\n    switch (emojiName) {\n      case \"THUMBS_UP\":\n        return \"üëç\";\n\n      case \"THUMBS_DOWN\":\n        return \"üëé\";\n\n      case \"LAUGH\":\n        return \"üòÑ\";\n\n      case \"HOORAY\":\n        return \"üéâ\";\n\n      case \"CONFUSED\":\n        return \"üòï\";\n\n      case \"HEART\":\n        return \"‚ù§Ô∏è\";\n\n      case \"ROCKET\":\n        return \"üöÄ\";\n\n      case \"EYES\":\n        return \"üëÄ\";\n    }\n  }\n\n  function createMarkup() {\n    return { __html: blog.bodyHTML };\n  }\n  const HyperLink = ({ children, ...props }) => (\n    <a href={props.href} target=\"_blank\" className=\"blog-post-anchor\">\n      {children}\n      <style jsx>\n        {`\n          a {\n            color: #484848;\n            font-weight: 400;\n          }\n        `}\n      </style>\n    </a>\n  );\n\n  const CodeBlock = ({ children }) => (\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\n      {children.props.children}\n    </SyntaxHighlighter>\n  );\n\n  function githubCounterEmojiSelect(emoji) {\n    console.log(emoji);\n  }\n\n  function githubCounterAddReaction() {\n    setAddreaction(!addReaction);\n  }\n  function onEmojiSelect(emoji) {\n    console.log(emoji);\n  }\n  return (\n    <div>\n      {blog.title && (\n        <div className=\"blog-view\">\n          <h1 className=\"blog-title\">{blog.title}</h1>\n          <div>\n            <div className=\"author-details\">\n              <img class=\"avatar\" src={blog.author.avatarUrl}></img>\n              <div>\n                <p className=\"author-name\">{blog.author.login}</p>\n                <p className=\"blog-date\">\n                  {moment(blog.updatedAt).format(\"DD MMM YYYY\")} . {readingTime(blog.body).minutes} Min Read . <a href={blog.url} target=\"_black\">View On Github</a>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Markdown\n            options={{\n              overrides: {\n                a: {\n                  component: HyperLink\n                },\n                pre: {\n                  component: CodeBlock\n                }\n              }\n            }}\n          >\n            {blog.body}\n          </Markdown>\n          {addReaction && (\n            <span className=\"reaction-github-emoji anim-scale-in\">\n              {/* <GithubSelector onSelect={emoji => onEmojiSelect(emoji)} /> */}\n              <GithubReactionTextCard link={blog.url}/>\n            </span>\n          )}\n          <GithubCounter counters={reactionCounter} onSelect={emoji => githubCounterEmojiSelect(emoji)} onAdd={() => githubCounterAddReaction()} />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react'\nimport './Header.css'\n\nexport default function Header() {\n    return (\n        <div className=\"main-header\">\n        <div className=\"wrap-big\">\n            <h1 className=\"header-title\">Saad Pasta</h1>\n            <h2 className=\"header-subtitle\">Front End Developer Blog</h2>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./BlogCard.css\";\nimport readingTime from \"reading-time\";\nimport { useHistory } from \"react-router-dom\";\nimport { get } from \"https\";\n\nexport default function BlogCard({ blog }) {\n  const [lables, setLables] = useState([]);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    getLabels();\n  }, []);\n\n  function openBlog(title, number) {\n    history.push(`/blog/${title}/${number}`);\n  }\n\n  function getLabels() {\n    const lables = blog.labels.nodes.filter((value, index) => {\n      return value.name != \"blog\";\n    });\n    setLables(lables);\n  }\n  return (\n    <div className=\"blog-card-div\">\n      <div className=\"blog-card-header\">\n        <div>\n          {lables.map(value => {\n            return (\n              <div key={value.id} className=\"blog-catgeory\" style={{ backgroundColor: `#${value.color}` }}>\n                {value.name}\n              </div>\n            );\n          })}\n        </div>\n        <div>\n          <p className=\"reading-time\">{readingTime(blog.body).minutes} Min Read</p>\n        </div>\n      </div>\n      <div>\n        <div className=\"blog-card-title\">\n          <h2 onClick={() => openBlog(blog.title, blog.number)}>{blog.title}</h2>\n        </div>\n        <div className=\"blog-card-description\">\n          <p>\n            {blog.bodyText}\n          </p>\n        </div>\n        <div className=\"blog-card-footer\"></div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport BlogHome from \"../BlogPost/BlogPost\";\nimport Header from \"../../Components/Header/Header\";\nimport BlogCard from \"../../Components/BlogCard/BlogCard\";\n\nfunction Blogs() {\n  const [blogs, setBlogs] = useState([]);\n\n  useEffect(() => {\n    getBlogsFromGithubIssues();\n  }, []);\n\n  function getBlogsFromGithubIssues() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(\"ODM5ODY0MWRmYzUxOTcyZTdhMWMxM2NmZGIwNWU4Yzc3NmI5NTg0ZQ==\")}`\n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repository(owner: \"saadpasta\", name: \"react-blog-github\" ) {\n              issues(first: 100, states: OPEN filterBy:{labels:\"blog\"}) {\n                nodes {\n                  title\n                  body\n                  bodyHTML\n                  bodyText\n                  number\n                  labels(first:100){\n                    nodes{\n                      color\n                      name\n                      id\n                    }\n                  }\n                  author {\n                    url\n                    avatarUrl\n                    login\n                  }\n                  updatedAt\n                  id\n                }\n              }\n            }\n          }\n        `\n      })\n      .then(result => {\n        setBlogsFunction(result.data.repository.issues.nodes);\n      });\n  }\n\n  function setBlogsFunction(array) {\n    setBlogs(array);\n  }\n  return (\n    <div>\n      <Header />\n      <div className=\"blog-div-main\">\n      {blogs.map((v, i) => {\n        return <BlogCard blog={v} key={i} />;\n      })}\n      </div>\n    </div>\n  );\n}\n\nexport default Blogs;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport App from \"./App\"\nimport Blogs from \"./Containers/Blogs/Blogs\"\nimport BlogHome from \"./Containers/BlogPost/BlogPost\";\n\nvar createBrowserHistory = require(\"history\").createBrowserHistory;\nconst history = createBrowserHistory();\n\n\nconst Routes = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={Blogs} /> \n        <Route exact path=\"/blog/:title/:issueNumber\" component={BlogHome}/>\n      </Switch>\n    </Router>\n  );\n};\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}