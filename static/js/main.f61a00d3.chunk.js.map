{"version":3,"sources":["logo.svg","App.js","Components/BlogHome/BlogHome.js","Components/Header/Header.js","Components/BlogCard/BlogCard.js","Containers/Blogs/Blogs.js","Routes.js","serviceWorker.js","index.js"],"names":["module","exports","App","BlogHome","useState","blog","setBlogs","addReaction","setAddreaction","issueNumber","parseInt","window","location","href","split","pop","useEffect","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","query","gql","then","result","array","data","repository","issue","catch","err","console","error","title","className","class","src","author","avatarUrl","login","moment","updatedAt","format","readingTime","body","minutes","options","overrides","a","component","children","props","target","jsx","pre","language","style","docco","onSelect","emoji","log","onEmojiSelect","counters","by","githubCounterEmojiSelect","onAdd","Header","BlogCard","lables","setLables","history","useHistory","labels","nodes","filter","value","index","name","getLabels","map","key","id","backgroundColor","color","onClick","number","push","bodyText","Blogs","blogs","issues","v","i","createBrowserHistory","require","Routes","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f61a00d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport moment from \"moment\";\nimport Markdown from \"markdown-to-jsx\";\nimport readingTime from \"reading-time\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { docco } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\nimport \"./BlogHome.css\";\nimport { GithubCounter, GithubSelector } from \"react-reactions\";\n\nexport default function BlogHome() {\n  const [blog, setBlogs] = useState([]);\n  const [addReaction, setAddreaction] = useState(false);\n  const issueNumber = parseInt(window.location.href.split(\"/\").pop());\n\n  useEffect(() => {\n    getBlogsFromGithubIssues();\n  }, []);\n\n  function getBlogsFromGithubIssues() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(\"ODM5ODY0MWRmYzUxOTcyZTdhMWMxM2NmZGIwNWU4Yzc3NmI5NTg0ZQ==\")}`\n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repository(owner: \"saadpasta\", name: \"react-blog-github\") {\n              issue(number: ${issueNumber}) {\n                title\n                body\n                bodyHTML\n                bodyText\n                number\n                bodyHTML\n                author {\n                  url\n                  avatarUrl\n                  login\n                }\n                updatedAt\n                id\n              }\n            }\n          }\n        `\n      })\n      .then(result => {\n        setBlogsFunction(result.data.repository.issue);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  function setBlogsFunction(array) {\n    setBlogs(array);\n  }\n\n  function createMarkup() {\n    return { __html: blog.bodyHTML };\n  }\n  const HyperLink = ({ children, ...props }) => (\n    <a href={props.href} target=\"_blank\">\n      {children}\n      <style jsx>\n        {`\n          a {\n            color: #484848;\n            font-weight: 400;\n          }\n        `}\n      </style>\n    </a>\n  );\n\n  const CodeBlock = ({ children }) => (\n    <SyntaxHighlighter language=\"javascript\" style={docco}>\n      {children.props.children}\n    </SyntaxHighlighter>\n  );\n\n  function githubCounterEmojiSelect(emoji) {\n    console.log(emoji);\n  }\n\n  function githubCounterAddReaction() {\n    setAddreaction(!addReaction);\n  }\n  function onEmojiSelect(emoji) {\n    console.log(emoji);\n  }\n  return (\n    <div>\n      {blog.title && (\n        <div className=\"blog-view\">\n          <h1 className=\"blog-title\">{blog.title}</h1>\n          <div>\n            <div className=\"author-details\">\n              <img class=\"avatar\" src={blog.author.avatarUrl}></img>\n              <div>\n                <p className=\"author-name\">{blog.author.login}</p>\n                <p className=\"blog-date\">\n                  {moment(blog.updatedAt).format(\"DD MMM YYYY\")} . {readingTime(blog.body).minutes} Min Read\n                </p>\n              </div>\n            </div>\n          </div>\n          <Markdown\n            options={{\n              overrides: {\n                a: {\n                  component: HyperLink\n                },\n                pre: {\n                  component: CodeBlock\n                }\n              }\n            }}\n          >\n            {blog.body}\n          </Markdown>\n          {addReaction && (\n            <span className=\"reaction-github-emoji anim-scale-in\">\n              <GithubSelector onSelect={emoji => onEmojiSelect(emoji)} />\n            </span>\n          )}\n          <GithubCounter\n            counters={[\n              {\n                emoji: \"👍\", // String emoji reaction\n                by: \"case\" // String of persons name\n              }\n            ]}\n            onSelect={emoji => githubCounterEmojiSelect(emoji)}\n            onAdd={() => githubCounterAddReaction()}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react'\nimport './Header.css'\n\nexport default function Header() {\n    return (\n        <div className=\"main-header\">\n        <div className=\"wrap-big\">\n            <h1 className=\"header-title\">Saad Pasta</h1>\n            <h2 className=\"header-subtitle\">Front End Developer Blog</h2>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./BlogCard.css\";\nimport readingTime from \"reading-time\";\nimport { useHistory } from \"react-router-dom\";\nimport { get } from \"https\";\n\nexport default function BlogCard({ blog }) {\n  const [lables, setLables] = useState([]);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    getLabels();\n  }, []);\n\n  function openBlog(title, number) {\n    history.push(`/blog/${title}/${number}`);\n  }\n\n  function getLabels() {\n    const lables = blog.labels.nodes.filter((value, index) => {\n      return value.name != \"blog\";\n    });\n    setLables(lables);\n  }\n  return (\n    <div className=\"blog-card-div\">\n      <div className=\"blog-card-header\">\n        <div>\n          {lables.map(value => {\n            return (\n              <div key={value.id} className=\"blog-catgeory\" style={{ backgroundColor: `#${value.color}` }}>\n                {value.name}\n              </div>\n            );\n          })}\n        </div>\n        <div>\n          <p className=\"reading-time\">{readingTime(blog.body).minutes} Min Read</p>\n        </div>\n      </div>\n      <div>\n        <div className=\"blog-card-title\">\n          <h2 onClick={() => openBlog(blog.title, blog.number)}>{blog.title}</h2>\n        </div>\n        <div className=\"blog-card-description\">\n          <p>\n            {blog.bodyText}\n          </p>\n        </div>\n        <div className=\"blog-card-footer\"></div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport BlogHome from \"../../Components/BlogHome/BlogHome\";\nimport Header from \"../../Components/Header/Header\";\nimport BlogCard from \"../../Components/BlogCard/BlogCard\";\n\nfunction Blogs() {\n  const [blogs, setBlogs] = useState([]);\n\n  useEffect(() => {\n    getBlogsFromGithubIssues();\n  }, []);\n\n  function getBlogsFromGithubIssues() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(\"ODM5ODY0MWRmYzUxOTcyZTdhMWMxM2NmZGIwNWU4Yzc3NmI5NTg0ZQ==\")}`\n          }\n        });\n      }\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repository(owner: \"saadpasta\", name: \"react-blog-github\" ) {\n              issues(first: 100, states: OPEN filterBy:{labels:\"blog\"}) {\n                nodes {\n                  title\n                  body\n                  bodyHTML\n                  bodyText\n                  number\n                  labels(first:100){\n                    nodes{\n                      color\n                      name\n                      id\n                    }\n                  }\n                  author {\n                    url\n                    avatarUrl\n                    login\n                  }\n                  updatedAt\n                  id\n                }\n              }\n            }\n          }\n        `\n      })\n      .then(result => {\n        setBlogsFunction(result.data.repository.issues.nodes);\n        console.log(result.data.repository.issues.nodes);\n      });\n  }\n\n  function setBlogsFunction(array) {\n    setBlogs(array);\n  }\n  return (\n    <div>\n      <Header />\n      <div className=\"blog-div-main\">\n      {blogs.map((v, i) => {\n        return <BlogCard blog={v} key={i} />;\n      })}\n      </div>\n    </div>\n  );\n}\n\nexport default Blogs;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport App from \"./App\"\nimport Blogs from \"./Containers/Blogs/Blogs\"\nimport BlogHome from \"./Components/BlogHome/BlogHome\";\n\nvar createBrowserHistory = require(\"history\").createBrowserHistory;\nconst history = createBrowserHistory();\n\n\nconst Routes = () => {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={Blogs} /> \n        <Route exact path=\"/blog/:title/:issueNumber\" component={BlogHome}/>\n      </Switch>\n    </Router>\n  );\n};\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}